//DESIGN MODULE:

module johnson_counter_design #(parameter WIDTH=4)  
  (  
    input clk,  
    input rstn,  
    output reg [WIDTH-1:0] out  
  );  
  always @ (posedge clk) begin  
      if (!rstn)  
         out <= 1;  
      else begin  
        out[WIDTH-1] <= ~out[0];  
        for (integer i = 0; i < WIDTH-1; i=i+1) begin  
          out[i] <= out[i+1];  
        end  
      end  
  end 
endmodule

//TESTBENCH MODULE:

module johnson_counter_tb;
parameter WIDTH = 4;  
  reg clk;  
  reg rstn;  
  wire [WIDTH-1:0] out;   
  johnson_counter_design   dut (.clk (clk), .rstn (rstn), .out (out));  
  always #10 clk = ~clk;   
  initial begin  
    {clk, rstn} <= 0;  
    repeat (2) @(posedge clk);  
    rstn <= 1;  
    repeat (15) @(posedge clk);  
    $finish;  
  end  
endmodule

