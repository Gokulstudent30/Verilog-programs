//DESIGN MODULE:

module gray_counter_design
   (input   clk,  
    input   rstn,  
    output reg [N-1:0] out); 
    parameter N = 4; 
    reg [N-1:0] q;  
    always @ (posedge clk) begin  
        if (!rstn) begin  
        q <= 0;  
            out <= 0;  
      end else begin  
        q <= q + 1;  
ifdef FOR_LOOP  
        for (int i = 0; i < N-1; i= i+1) begin  
        out[i] <= q[i+1] ^ q[i];  
        end  
        out[N-1] <= q[N-1];  
else  
            out <= {q[N-1], q[N-1:1] ^ q[N-2:0]};  
endif  
    end  
    end  
endmodule

//TESTBENCH MODULE:

module gray_counter_tb;
parameter N = 4;  
  reg clk;  
  reg rstn;  
  wire [N-1:0] out;   

  gray_counter_design dut ( .clk(clk), .rstn(rstn), .out(out));  
  
  always #10 clk = ~clk;  
  
  initial begin  
    {clk, rstn} <= 0;    
  
    repeat(2) @ (posedge clk);  
    rstn <= 1;  
    repeat(20) @ (posedge clk);  
    $finish;  
  end
endmodule

